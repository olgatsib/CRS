// -------------------------------// Kevin T. Manley// CSE 593// -------------------------------package MiddleImpl;import java.io.IOException;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectOutputStream;import java.io.ObjectInputStream;import java.util.*;public class Customer extends RMItem{    Customer(int id) {        super();		m_Reservations = new RMHashtable();		m_nID=id;    }        // creates a deep copy of the object    public static Customer copy(Customer other) {	    Object obj = null;	    try {            // Write the object out to a byte array            ByteArrayOutputStream bos = new ByteArrayOutputStream();            ObjectOutputStream out = new ObjectOutputStream(bos);            out.writeObject(other);            out.flush();            out.close();            // Make an input stream from the byte array and read            // a copy of the object back in.            ObjectInputStream in = new ObjectInputStream(                new ByteArrayInputStream(bos.toByteArray()));            obj = in.readObject();        }	    catch(IOException e) {            e.printStackTrace();        }        catch(ClassNotFoundException cnfe) {            cnfe.printStackTrace();        }	    return (Customer)obj;    }    /*public Customer copy(Customer other) {    	Customer copy = new Customer(other.getID());    	Object key = null;    	m_Reservations = new RMHashtable();    	for (Enumeration e = other.getReservations().keys(); e.hasMoreElements(); ) {			key = (String)e.nextElement();			ReservedItem item = (ReservedItem) m_Reservations.get( key );			m_Reservations.put(key, item.copy());    	}    	return copy;    }*/        public void setID( int id )    { m_nID=id; }    	public int getID()	{ return m_nID; }	public void reserve( String key, String location, int price )	{		ReservedItem reservedItem = getReservedItem( key );		if( reservedItem == null ) {			// customer doesn't already have a reservation for this resource, so create a new one now			reservedItem = new ReservedItem( key, location, 1, price );		} else {			reservedItem.setCount( reservedItem.getCount() + 1 );			// NOTE: latest price overrides existing price			reservedItem.setPrice( price );		} // else		m_Reservations.put( reservedItem.getKey(), reservedItem );	}		public ReservedItem getReservedItem( String key )		{			ReservedItem reservedItem = (ReservedItem) m_Reservations.get( key );			return reservedItem;		}		public String printBill()		{			String s = "Bill for customer " + m_nID + "\n";			Object key = null;			for (Enumeration e = m_Reservations.keys(); e.hasMoreElements(); ) {				key = e.nextElement();				ReservedItem item = (ReservedItem) m_Reservations.get( key );				s = s + item.getCount() + " " + item.getReservableItemKey() + " $" + item.getPrice() + "\n";			}			return s;		}		public String toString()		{ return "--- BEGIN CUSTOMER key='" + getKey() + "', id='" + getID() + "', reservations=>\n" +						 m_Reservations.toString() + "\n" +						 "--- END CUSTOMER ---"; }		public static String getKey( int customerID )		{			String s = "customer-" + customerID;			return s.toLowerCase();		}		public String getKey()		{			return getKey( getID() );		}		public RMHashtable getReservations()		{			try {				return (RMHashtable)  m_Reservations;			} catch( Exception e ) {				return null;			} // catch		}		private int m_nID;		private RMHashtable m_Reservations;}